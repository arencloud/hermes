version: "3.8"

# Rootless-friendly dev stack for Hermes using OCI images (Podman Compose)
# Services:
# - minio: S3-compatible object storage for testing
# - postgres: optional SQL database for Hermes (recommended in containers)
#
# Usage (see Makefile for helpers):
#   podman-compose up -d
#   podman-compose down
#
services:
  minio:
    image: quay.io/minio/minio:latest
    container_name: hermes-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # MinIO Console
    volumes:
      - ./dev/minio:/data:Z
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 12

  postgres:
    image: docker.io/library/postgres:16-alpine
    container_name: hermes-postgres
    environment:
      - POSTGRES_DB=${PGDATABASE:-hermes}
      - POSTGRES_USER=${PGUSER:-hermes}
      - POSTGRES_PASSWORD=${PGPASSWORD:-hermes}
    ports:
      - "5432:5432"
    volumes:
      - ./dev/pg:/var/lib/postgresql/data:Z
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$PGUSER -d $$PGDATABASE"]
      interval: 10s
      timeout: 5s
      retries: 12

# No Hermes service here by default to keep development fast (run it locally with `make run`).
# You can add a containerized Hermes later, pointing DB_DRIVER=postgres and DATABASE_URL envs.
